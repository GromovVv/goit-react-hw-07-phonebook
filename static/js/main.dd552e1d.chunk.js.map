{"version":3,"sources":["Redux/phonebook-selectors.js","Redux/phonebook-actions.js","Redux/phonebook-operations.js","Components/ContactForm/ContactForm.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","App.js","Redux/phonebook-reducers.js","Redux/store.js","index.js"],"names":["getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","ContactForm","useSelector","dispatch","useDispatch","onSubmit","number","contact","get","then","data","catch","error","addContact","useState","setName","setNumber","event","preventDefault","namesIsIn","reduce","acc","numbersIsIn","alert","contactCheck","className","type","value","placeholder","pattern","title","onChange","currentTarget","required","Filter","target","ContactList","onDeleteContact","id","contactId","map","onClick","App","totalContactsCount","length","createReducer","_","payload","loading","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebookReducer","devTools","process","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd552e1d.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getError = state => state.contacts.error;\nexport const getLoading = state => state.contacts.loading;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({name}) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('phonebook/fetchContactRequest');\nexport const fetchContactSuccess = createAction('phonebook/fetchContactSuccess');\nexport const fetchContactError = createAction('phonebook/fetchContactError');\n\nexport const addContactRequest = createAction('phonebook/addContactRequest');\nexport const addContactSuccess = createAction('phonebook/addContactSuccess');\nexport const addContactError = createAction('phonebook/addContactError');\n\nexport const deleteContactRequest = createAction('phonebook/deleteContactRequest');\nexport const deleteContactSuccess = createAction('phonebook/deleteContactSuccess');\nexport const deleteContactError = createAction('phonebook/deleteContactError');\n\nexport const changeFilter=createAction('phonebook/changeFilter')\n","import axios from 'axios';\r\nimport { \r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n} from './phonebook-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    axios \r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(error => dispatch(fetchContactError(error)))\r\n}\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number,\r\n    }\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n    .get('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)))\r\n}\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n\r\n    dispatch(deleteContactRequest());\r\n    \r\n    axios\r\n    .get(`/xontacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)))\r\n}\r\n\r\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getContacts } from '../../Redux/phonebook-selectors';\nimport { addContact } from '../../Redux/phonebook-operations';\nimport './ContactForm.scss';\n\nfunction ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const onSubmit = (name, number) => dispatch(addContact(name, number));\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactCheck = () => {\n    const namesIsIn = contacts.reduce(\n      (acc, contact) => [...acc, contact.name],\n      [],\n    );\n    const numbersIsIn = contacts.reduce(\n      (acc, contact) => [...acc, contact.number],\n      [],\n    );\n\n    if (namesIsIn.includes(name) || numbersIsIn.includes(number)) {\n      alert(`${name}${number} is already in contacts`);\n    }\n\n    if (name === '' || number === '') {\n      alert('Enter all data, please');\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setName('');\n    setNumber('');\n    if (contactCheck()) {\n      return;\n    }\n\n    onSubmit(name, number);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <label className=\"form__label\">\n          Name\n          <input\n            className=\"form__input\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"Enter name in format Vasya Pupkin\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            onChange={event => setName(event.currentTarget.value)}\n            required\n          />\n        </label>\n        <label className=\"form__label\">\n          Number\n          <input\n            className=\"form__input\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            placeholder=\"Enter number in format 111-11-11\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            onChange={event => setNumber(event.currentTarget.value)}\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className=\"form__btn\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../Redux/phonebook-selectors';\nimport { changeFilter } from '../../Redux/phonebook-actions';\nimport './Filter.scss';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n  const change = event => dispatch(changeFilter(event.target.value));\n\n  return (\n    <div className=\"Filter\">\n      <label>\n        <input\n          className=\"Filter__input\"\n          name=\"filter\"\n          type=\"text\"\n          value={value}\n          onChange={change}\n          title=\"Type name or number of Subscriber\"\n        />\n      </label>\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../Redux/phonebook-operations';\nimport { getVisibleContacts } from '../../Redux/phonebook-selectors';\n\nimport PropTypes from 'prop-types';\n\nimport './ContactList.scss';\n\nfunction ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  return (\n    <ul className=\"Contact__list\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className=\"ContactList__item\">\n          {name}: {number}\n          <button\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n            className=\"ContactList__btn\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport { getVisibleContacts } from './Redux/phonebook-selectors';\nimport ContactForm from './Components/ContactForm';\nimport Filter from './Components/Filter';\nimport ContactList from './Components/ContactList';\nimport { useSelector } from 'react-redux';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './App.scss';\n\nexport default function App() {\n  const contacts = useSelector(getVisibleContacts);\n  const totalContactsCount = contacts.length;\n\n  return (\n    <div className=\"App\">\n      <h2 className=\"Title\">Phonebook</h2>\n      <ContactForm />\n      <h2 className=\"Title\">Total contacts: {totalContactsCount}</h2>\n      <Filter />\n      {contacts.length > 0 ? (\n        <>\n          <ContactList />\n        </>\n      ) : (\n        <span className=\"Empty\">Your phonebook is empty or you have no such contact</span>\n      )}\n    </div>\n  );\n}\n\nApp.propTypes = {\n  filter: PropTypes.string,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from './phonebook-actions';\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {\n    [fetchContactError]: (_, action) => action.payload,\n    [fetchContactRequest]: () => null,\n    [addContactRequest]:() => null,\n    [deleteContactRequest]:() => null,\n    [deleteContactError]: (_, action) => action.payload,\n    [addContactError]: (_, action) => action.payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport phonebookReducer from './phonebook-reducers';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst phonebookPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(phonebookPersistConfig, phonebookReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/store';\n\nimport './BasicStyles.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);"],"sourceRoot":""}